# Generated by Django 4.2.2 on 2023-07-10 14:52

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import links.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AliasShortLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('clicks_count', models.PositiveIntegerField(default=0, verbose_name='Переходов по ссылке')),
                ('last_clicked_at', models.DateTimeField(blank=True, null=True, verbose_name='Последнее время клика')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна ли ссылка?')),
                ('original_link', models.URLField(max_length=2000, verbose_name='Оригинальная ссылка')),
                ('alias', models.CharField(blank=True, db_index=True, max_length=30, unique=True, validators=[links.validators.AliasShortURLValidator, django.core.validators.MinValueValidator(limit_value=5)], verbose_name='Пользовательское имя ссылки')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alias_owner', to=settings.AUTH_USER_MODEL, verbose_name='Владелец пользовательской ссылки')),
            ],
            options={
                'verbose_name': 'Пользовательская ссылка',
                'verbose_name_plural': 'Пользовательские ссылки',
                'db_table': 'links_alias_link',
                'ordering': ['original_link', 'alias', 'created_at', 'clicks_count', 'last_clicked_at', 'is_active', 'owner'],
            },
        ),
        migrations.CreateModel(
            name='ShortLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_link', models.URLField(max_length=2000, unique=True, verbose_name='Оригинальная ссылка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('clicks_count', models.PositiveIntegerField(default=0, verbose_name='Переходов по ссылке')),
                ('last_clicked_at', models.DateTimeField(blank=True, null=True, verbose_name='Последнее время клика')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна ли ссылка?')),
                ('short_url', models.CharField(blank=True, db_index=True, max_length=7, unique=True, validators=[links.validators.ShortURLValidator, django.core.validators.MinValueValidator(limit_value=7)], verbose_name='Короткий код ссылки')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='short_owner', to=settings.AUTH_USER_MODEL, verbose_name='Владелец короткой ссылки')),
            ],
            options={
                'verbose_name': 'Короткая ссылка',
                'verbose_name_plural': 'Короткие ссылки',
                'ordering': ['original_link', 'short_url', 'created_at', 'clicks_count', 'last_clicked_at', 'is_active', 'owner'],
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Имя группы')),
                ('color', models.CharField(default='#FFFFFF', max_length=7, validators=[links.validators.HexColorValidator], verbose_name='Цвет')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('alias_links', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='links.aliasshortlink', verbose_name='Пользовательские ссылки группы')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_owner', to=settings.AUTH_USER_MODEL, verbose_name='Владелец группы')),
                ('short_links', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='links.shortlink', verbose_name='Короткие ссылки группы')),
            ],
            options={
                'verbose_name': 'Группа ссылок',
                'verbose_name_plural': 'Группы ссылок',
                'db_table': 'links_user_group',
            },
        ),
        migrations.CreateModel(
            name='UserCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Имя группы')),
                ('groups', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', related_query_name='group', to='links.usergroup', verbose_name='Группы компании')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_owner', to=settings.AUTH_USER_MODEL, verbose_name='Владелец компании')),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
                'db_table': 'links_user_campaign',
            },
        ),
        migrations.AddConstraint(
            model_name='usercampaign',
            constraint=models.UniqueConstraint(fields=('name', 'owner'), name='unique_name_per_owner', violation_error_message='Такая компания уже существует.'),
        ),
        migrations.AddConstraint(
            model_name='shortlink',
            constraint=models.UniqueConstraint(fields=('original_link', 'short_url'), name='unique_link_shortcode'),
        ),
        migrations.AddConstraint(
            model_name='aliasshortlink',
            constraint=models.UniqueConstraint(fields=('original_link', 'alias'), name='unique_alias_link'),
        ),
    ]
